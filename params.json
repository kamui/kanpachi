{"name":"Kanpachi","tagline":"Web API DSL for defining specs and to generate documentation","body":"# Kanpachi\r\n\r\n[![CI Build Status](https://secure.travis-ci.org/kamui/kanpachi.png?branch=master)](http://travis-ci.org/kamui/kanpachi)\r\n\r\nKanpachi is a ruby gem that provides a DSL to describe your web API, generate documentation, and will even eventually\r\nhelp you implement it.\r\n\r\nResource input parameters are defiend with the [mutations](https://github.com/cypriss/mutations) gem. You can refer to\r\ntheir [wiki](https://github.com/cypriss/mutations/wiki/Filtering-Input) to find out how to use their DSL.\r\n\r\nResponse representations are defined as [Roar](https://github.com/apotonick/roar) representers. You can check out the\r\n[representable docs](https://github.com/apotonick/representable) to figure out how to customize your responses.\r\n\r\nTo demo an example API project, checkout [kanpachi-example](https://github.com/kamui/kanpachi-example). If you want to see what the html documentation looks like it's available at <http://kamui.github.io/kanpachi-example>.\r\n\r\nThis project was inspired by [@mattetti](https://github.com/mattetti/)'s [Weasel-Diesel](https://github.com/mattetti/Weasel-Diesel) project, of which I am also a contributor. I created Kanpachi as a way of experimenting and leaning how to create a DSL in ruby.\r\n\r\n## Example\r\n\r\nBelow is an example of one of Twitter's API endpoints partially described in Kanpachi.\r\n\r\n```ruby\r\napi 'Twitter' do\r\n  # API meta data\r\n  title 'REST API v1.1 Resources'\r\n  description 'This describes the resources that make up the official Twitter API v1.1'\r\n  host 'api.twitter.com'\r\n\r\n  # Define global error responses\r\n  error :malformed_params do\r\n    description 'Sending invalid JSON will result in a 400 Bad Request response.'\r\n\r\n    response do\r\n      status 400\r\n      header 'Content-Type', 'application/json'\r\n      representation do\r\n        property :message, type: String\r\n      end\r\n    end\r\n  end\r\n\r\n  section 'Timelines' do\r\n    description 'Timelines are collections of Tweets, ordered with the most recent first.'\r\n\r\n    resource :get, '/statuses/mentions_timeline' do\r\n      name 'Mentions timeline'\r\n      description <<-TEXT\r\nReturns the 20 most recent mentions (tweets containing a users's @screen_name) for\r\nthe authenticating user.\r\n\r\nThe timeline returned is the equivalent of the one seen when you view\r\n[your mentions](https://twitter.com/mentions) on twitter.com.\r\n\r\nThis method can only return up to 800 tweets.\r\n\r\nSee [__Working with Timelines__](https://dev.twitter.com/docs/working-with-timelines)\r\nfor instructions on traversing timelines.\r\nTEXT\r\n      versions '1.1'\r\n      ssl true\r\n      formats :json\r\n\r\n      # Params are a subclass of Mutations::Command\r\n      params do\r\n        required do\r\n        end\r\n\r\n        optional do\r\n          integer :count,\r\n            doc: 'Specifies the number of tweets to try and retrieve, up to a\r\n              maximum of 200. The value of count is best thought of as a limit to\r\n              the number of tweets to return because suspended or deleted content\r\n              is removed after the count has been applied. We include retweets in\r\n              the count, even if `include_rts` is not supplied. It is recommended\r\n              you always send `include_rts=1` when using this API method.'\r\n          integer :since_id,\r\n            doc: 'Returns results with an ID greater than (that is, more recent\r\n              than) the specified ID. There are limits to the number of Tweets\r\n              which can be accessed through the API. If the limit of Tweets has\r\n              occured since the since_id, the since_id will be forced to the\r\n              oldest ID available.',\r\n            example: 12345\r\n          integer :max_id,\r\n            doc: 'Returns results with an ID less than (that is, older than) or\r\n              equal to the specified ID.',\r\n            example: 54321\r\n          boolean :trim_user,\r\n            doc: 'When set to either true, t or 1, each tweet returned in a timeline\r\n              will include a user object including only the status authors numerical\r\n              ID. Omit this parameter to receive the complete user object.',\r\n            example: true\r\n          boolean :contributor_details,\r\n            doc: 'This parameter enhances the contributors element of the status\r\n              response to include the screen_name of the contributor. By default\r\n              only the user_id of the contributor is included.',\r\n            example: true\r\n          boolean :include_entities,\r\n            doc: 'The `entities` node will be disincluded when set to false.',\r\n            example: false\r\n        end\r\n      end\r\n\r\n      # Multiple responses are supported\r\n      response :default do\r\n        status 200\r\n        header 'Content-Type', 'application/json'\r\n\r\n        # Response representations include Roar::Representer\r\n        representation do\r\n          include ::Representable::JSON::Collection\r\n          property :title,\r\n            type: String,\r\n            doc: 'The title',\r\n            example: 'The Title'\r\n          collection :coordinates,\r\n            doc: 'The coordinates',\r\n            example: [100.4, 45.1]\r\n        end\r\n      end\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'kanpachi'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install kanpachi\r\n\r\n## Usage\r\n\r\nCreate a new API\r\n\r\n```bash\r\n$ kanpachi new my_api\r\n$ cd my_api\r\n```\r\n\r\nBuild HTML documentation\r\n\r\n```bash\r\n$ kanpachi build\r\n```\r\n\r\nStart a documentation server\r\n\r\n```bash\r\n$ kanpachi server\r\n```\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}